							Projektni zadatak 8: Design patterni


	1. Proxy pattern

				- Kada se koristi:
		
		Namjena Proxy paterna je da omogući pristup i kontrolu pristupa stvarnim objektima. 
		Proxy patern rješava probleme kada se objekt ne može instancirati direktno (npr. zbog restrikcije pristupa).  
		
		Proxy patern se pored kontrole pristupa koristi kada postoje objekti koji su skupi za kreirati, potreban
		je lokalni objekat koji referira na remote objekat. Često se koristi i za klase koje imaju osjetljive
		podatke ili spore operacije.

				- Kako se koristi:

		Tako sto se kreira objekat posrednik, koji sluzi za prihvatanje i eventualno odgovaranje na zahtjeve 
		o pristupu stvarnom objektu.

				- Iskoristenost u projektu:

		Nije koristen u projektu, ali mozemo proxy design pattern koristiti pri prijavi na nasu aplikaciju. 
		Mogli bi da kreiramo objekat koji ce primati zahtjeve za pristup aplikaciji, zajedno sa podacima o mailu i sifri korisnika, a zatim
		u zavisnosti od proslijedenih podataka otvaramo neku formu aplikacije, ili javljamo gresku.


	2. Adapter pattern

				- Kada se koristi:

		Osnovna namjena Adapter paterna je da omogući širu upotrebu već postojećih klasa. U situacijama
		kada je potreban drugačiji interfejs već postojeće klase, a ne želimo mijenjati postojeću klasu koristi
		se Adapter patern. 

		U slučaju da originalna klasa sadrži samo mali dio funkcionalnosti onda je bolji pristup kreirati novu klasu i zaobići
		korištenje Adapter paterna. Adapter patern ustvari mapira interfejs jedne klase u drugu tako da mogu raditi zajedno. 

			 	- Kako se koristi:
		
		Adapter patern kreira novu adapter klasu koja služi kao posrednik između
		originalne klase i željenog interfejsa.

		Adapter patern sadrži sljedeće klase: 

			- Client – klasa koja sarađuje sa drugim klasama preko ITarget interfejsa 
			- ITarget – definira domen specifični interfejs koji klijent koristi/zahtjeva (zahtijevani interfejs) 
			- Adapter – implementira novi zahtijevani interfejs tj. prilagođava „stari-postojeći“ interfejs 
			- Adaptee – definira postojeći interfejs koji treba prilagoditi/adaptirati. 

				- Iskoristenost u nasem projektu:

		Nije koristen u projektu. Kako nase klase ne sadrze veliki broj funkcionalnosti, preporucljivo je da se ne koristi adapter patern.


	3. Decorator pattern

				- Kada se koristi:

	Osnovna namjena Decorator paterna je da omogući dinamičko dodavanje novih elemenata i ponašanja
	(funkcionalnosti) postojećim objektima. Objekat pri tome ne zna da je urađena dekoracija što je veoma
	korisno za iskoristljivost i ponovnu upotrebu komponenti softverskog sistema. Može se naprimjer koristi i za implementaciju
	različitih kompresija videa, simultano prevođenje. 

				- Kako se koristi:

	Decorator patern čine sljedeće klase: 
		- Component – Originalna klasa (klase) koja sadrži interfejs koji se može mijenjati ili mu se mogu dinamički dodati operacije 
		- IComponent – interfejs koji identificira klase objekata koji trebaju biti dekorisani (Component je jedna od njih) 
		- Decorator – klasa koja odgovara IComponent interfejsu i implementira dinamički prošireni interfejs. 

				- Iskoristenost u nasem projektu:

	Nije koristen u projektu. U nasem projektu mozemo koristiti ovaj patern prilikom dodavanja novih ili brisanja starih letova, 
	gdje se lista svih letova dinamicki prikazuje. Takoder mozemo koristiti ovaj patern prilikom rezervacije ili ponistenja 
	rezervacije karata, gdje treba da dinamicki prikazujemo broj slobodnih mjesta u odredenom letu.


4. Iterator pattern

- Kada se koristi:
Ovaj pattern se koristi u situacijama kada želimo omogućiti pristup elementima kolekcije sekvencijalno bez poznavanja interne strukture 	kolekcije.

- Kako se koristi:
Implementacija ovog patterna podrazumjeva sljedeće:
	Client - sadrži Collection objekat i koristi foreach iskaz za iteraciju kolekcije
	IEnumerable - definira interfejs za operaciju GetEnumerator
	Collection - tip podataka koji sadrži sposobnost generiranja kolekcije vrijednosti
	GetEnumerator - metoda koja pruža vrijednosti kolekcije u sekvencijalno
	OtherOps - druge metode koje pružaju vrijednosti kolekcije u nekom drugom redoslijedu ili obliku
U C#-u se koristi intefejs IEnumerator i njegova metoda GetEnumerator iz System.Collections, a ova metoda se automatski uključuje u okviru foreach iskaza.

- Iskorištenost u našem projektu:
Pattern nije korišten u našem projektu do sada (dio sa implementacijom UWP dijela aplikacije za administrativni dio), a osnovni razlog je nepoznavanje patterna do trenutka implementacije. Pogodno mjesto za implementaciju ovog patterna bi svakako bila npr. klasa PonudaLetova u kojoj čuvamo listu letova. U ovoj klasi bi definitivno trebalo iskoristiti ovaj pattern i tako omogućiti pristup svakom letu pojedinačno bez da otkrivamo internu strukturu naše klase Let.


5. Strategy pattern

- Kada se koristi:
Strategy pattern se koristi kada želimo izdvojiti algoritam iz matične klase i uključiti ga u posebne klase. Pogodan je kada postoje različiti primjenjivi algoritmi (strategije) za neki problem.

- Kako se koristi:
Implementacija ovog patterna podrazumjeva sljedeće:
	Context - Klasa preko koje Client klasa daje kontekstualne informacije za IStrategy algoritme.
	IStrategy - definira zajednički interfejs za sve lagoritme (strategije).
	StrategyA, StrategyB .. - Klase koje implementiraju algoritme (konkretne strategije) tj. IStrategy interfejs.
U Context klasi bi obično imali neki switch iskaz ili kaskadni if iskaz za odlučivanje o izboru strategije, a ovo je moguće realizovati i preko delegata ukoliko su strategije jednostavne metode. 
Prednost ovog patterna je što se mogu definirati dodatne metode za nove strategije neovisno od ostalih klasa!

- Iskorištenost u našem projektu:
Ni ovaj pattern nije korišten ali za njega također postoji dobro mjesto za implementaciju i korištenje. Naime u folderu Helper gdje smo sadržavali nekoliko pomoćnih klasa, imali smo i klasu Validation. U njoj kreiramo MD5 hash za šifre pomoću funkcije CreateMD5. Ukoliko bismo iskoristili Strategy pattern u našem projektu, mogli bismo podržati puno više načina za hash-iranje šifri kao i dati podršku promjeni hash funkcije ukoliko bi za to bilo potrebe u budućnosti. 


6. Observer pattern

- Kada se koristi:
Ovaj pattern se koristi za uspostavljanje relacije između objekata takve da kada se stanje jednog objekta promijeni svi vezani objekti dobiju obavijest. 

- Kako se koristi:
Struktura ovog patterna se sastoji od:
	Subjekt klasa - instanca ove klase mijenja svoje stanje i obavještava Observers klase.
	IObserver - interfejs za observere, sadrži samo metodu koja se poziva kada se promijeni stanje neke Subject instance
	Observer - obezbjeđuje konkretnu implementaciju za interfejs
	Update - metoda koja formira interfejs između klasa Subject i Observer
	Notify - Event mehanizam za pozivanje update operacije
Implementacija bi se ogledala u privatnom događaju (private event) Notify u Subject klasi, gdje bi poslije promjene njegovog stanja on aktivirao događaj (event) i slao svoje stanje kao parametar Update metodi unutar Observer klase (za što je prethodno neophodno da metoda bude registrovana na Subject klasu). Moguće je više različitih posmatrača sa svojim Update metodama.

- Iskorištenost u našem projektu:
Ni ovaj pattern nije iskorišten u našem patternu a moguća implementacija i upotreba ovog patterna bi se ogledala kroz sistem za notifikaciju korisnika o dostupnim akcijama/popustima za karte određenih letova, odgođene letove i sl. 













